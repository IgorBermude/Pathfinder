<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pathfinder/ui/profile/ProfileFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pathfinder/ui/profile/ProfileFragment.kt" />
              <option name="originalContent" value="package com.example.pathfinder.ui.profile&#10;&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.net.Uri&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.activity.result.ActivityResultLauncher&#10;import androidx.fragment.app.Fragment&#10;import androidx.fragment.app.viewModels&#10;import com.bumptech.glide.Glide&#10;import com.example.pathfinder.R&#10;import com.example.pathfinder.data.models.Usuario&#10;import com.example.pathfinder.util.AndroidUtil&#10;import com.github.dhaval2404.imagepicker.ImagePicker&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.launch&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;&#10;class ProfileFragment : Fragment() {&#10;&#10;    companion object {&#10;        fun newInstance() = ProfileFragment()&#10;    }&#10;&#10;    private val viewModel: ProfileViewModel by viewModels()&#10;    private val auth: FirebaseAuth = FirebaseAuth.getInstance()&#10;    private val firestore: FirebaseFirestore = FirebaseFirestore.getInstance()&#10;    private lateinit var imagePickLauncher: ActivityResultLauncher&lt;Intent&gt;&#10;    private var selectedImageUri: Uri? = null&#10;&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View {&#10;        val view = inflater.inflate(R.layout.fragment_profile, container, false)&#10;        setUserData(view)&#10;        return view&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        // Utilizo a library de image picker para selecionar a foto do usuário&#10;        imagePickLauncher = registerForActivityResult(&#10;            androidx.activity.result.contract.ActivityResultContracts.StartActivityForResult()&#10;        ) { result -&gt;&#10;            if (result.resultCode == Activity.RESULT_OK) {&#10;                val data = result.data&#10;                if(data!= null &amp;&amp; data.data != null) {&#10;                    selectedImageUri = data.data&#10;                    AndroidUtil.setProfilePic(&#10;                        requireContext(),&#10;                        selectedImageUri,&#10;                        requireView().findViewById&lt;ImageView&gt;(R.id.imageView)&#10;                    )&#10;                }&#10;&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        view.findViewById&lt;ImageView&gt;(R.id.imageView).setOnClickListener {&#10;            ImagePicker.with(this).cropSquare().compress(512).maxResultSize(512,512)&#10;                .createIntent { intent -&gt;&#10;                    imagePickLauncher.launch(intent)&#10;                }&#10;        }&#10;&#10;        view.findViewById&lt;TextView&gt;(R.id.btn_editar_profile).setOnClickListener {&#10;            &#10;        }&#10;&#10;        view.findViewById&lt;TextView&gt;(R.id.textView2).setOnClickListener {&#10;            // Implementar ação para editar nome de usuário&#10;        }&#10;    }&#10;&#10;    private fun setUserData(view: View) {&#10;        val currentUser = auth.currentUser&#10;        if (currentUser != null) {&#10;            val userId = currentUser.uid&#10;            firestore.collection(&quot;usuarios&quot;).document(userId).get()&#10;                .addOnSuccessListener { document -&gt;&#10;                    if (document != null) {&#10;                        val usuario = document.toObject(Usuario::class.java)&#10;                        if (usuario != null) {&#10;                            view.findViewById&lt;TextView&gt;(R.id.textView2).text = usuario.nomeUsuario&#10;                            view.findViewById&lt;TextView&gt;(R.id.textView3).text = usuario.emailUsuario&#10;                            view.findViewById&lt;TextView&gt;(R.id.senha).text = usuario.senhaUsuario // Ocultar senha&#10;                            view.findViewById&lt;TextView&gt;(R.id.email).text = usuario.emailUsuario&#10;                            view.findViewById&lt;TextView&gt;(R.id.idade).text = formatDate(usuario.idadeUsuario)&#10;                            view.findViewById&lt;TextView&gt;(R.id.nomeUsuario).text = usuario.nomeUsuario&#10;                            view.findViewById&lt;TextView&gt;(R.id.endereco).text = usuario.enderecoUsuario?.toString() ?: &quot;Não informado&quot;&#10;                            val imageView = view.findViewById&lt;ImageView&gt;(R.id.imageView)&#10;                            imageView.setImageResource(R.drawable.ic_profile)&#10;&#10;                            if (!usuario.fotoUsuario.isNullOrEmpty()) {&#10;                                Log.d(&quot;ProfileFragment&quot;, &quot;fotoUsuario: ${usuario.fotoUsuario}&quot;)&#10;                                Glide.with(view.context)&#10;                                    .load(usuario.fotoUsuario)&#10;                                    .error(R.drawable.ic_profile) // Usa a imagem genérica como fallback&#10;                                    .into(imageView)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;                .addOnFailureListener { exception -&gt;&#10;                    Toast.makeText(requireContext(), &quot;Erro ao carregar dados do usuário ${exception.message}&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;        }&#10;    }&#10;&#10;    private fun formatDate(date: Timestamp?): String {&#10;        return if (date != null) {&#10;            val formatter = SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault())&#10;            val dateObj = date.toDate() // Corrigido: converte Timestamp para Date&#10;            formatter.format(dateObj)&#10;        } else {&#10;            &quot;Não informado&quot;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pathfinder.ui.profile&#10;&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.net.Uri&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.activity.result.ActivityResultLauncher&#10;import androidx.fragment.app.Fragment&#10;import androidx.fragment.app.activityViewModels&#10;import androidx.fragment.app.viewModels&#10;import com.bumptech.glide.Glide&#10;import com.example.pathfinder.R&#10;import com.example.pathfinder.data.AuthViewModel&#10;import com.example.pathfinder.data.models.Usuario&#10;import com.example.pathfinder.util.AndroidUtil&#10;import com.github.dhaval2404.imagepicker.ImagePicker&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.flow.collectLatest&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;&#10;class ProfileFragment : Fragment() {&#10;&#10;    companion object {&#10;        fun newInstance() = ProfileFragment()&#10;    }&#10;&#10;    private val viewModel: ProfileViewModel by viewModels()&#10;    private val auth: FirebaseAuth = FirebaseAuth.getInstance()&#10;    private val firestore: FirebaseFirestore = FirebaseFirestore.getInstance()&#10;    private lateinit var imagePickLauncher: ActivityResultLauncher&lt;Intent&gt;&#10;    private var selectedImageUri: Uri? = null&#10;    private val authViewModel: AuthViewModel by activityViewModels { AuthViewModel.Factory }&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View {&#10;        val view = inflater.inflate(R.layout.fragment_profile, container, false)&#10;        setUserData(view)&#10;        return view&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        // Utilizo a library de image picker para selecionar a foto do usuário&#10;        imagePickLauncher = registerForActivityResult(&#10;            androidx.activity.result.contract.ActivityResultContracts.StartActivityForResult()&#10;        ) { result -&gt;&#10;            if (result.resultCode == Activity.RESULT_OK) {&#10;                val data = result.data&#10;                if(data!= null &amp;&amp; data.data != null) {&#10;                    selectedImageUri = data.data&#10;                    AndroidUtil.setProfilePic(&#10;                        requireContext(),&#10;                        selectedImageUri,&#10;                        requireView().findViewById&lt;ImageView&gt;(R.id.imageView)&#10;                    )&#10;                }&#10;&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        view.findViewById&lt;ImageView&gt;(R.id.imageView).setOnClickListener {&#10;            ImagePicker.with(this).cropSquare().compress(512).maxResultSize(512,512)&#10;                .createIntent { intent -&gt;&#10;                    imagePickLauncher.launch(intent)&#10;                }&#10;        }&#10;&#10;        view.findViewById&lt;TextView&gt;(R.id.btn_editar_profile).setOnClickListener {&#10;            // Pega os dados atuais dos campos&#10;            val nome = view.findViewById&lt;TextView&gt;(R.id.nomeUsuario).text.toString()&#10;            val email = view.findViewById&lt;TextView&gt;(R.id.email).text.toString()&#10;            val senha = view.findViewById&lt;TextView&gt;(R.id.senha).text.toString()&#10;            val idadeStr = view.findViewById&lt;TextView&gt;(R.id.idade).text.toString()&#10;            val endereco = view.findViewById&lt;TextView&gt;(R.id.endereco).text.toString()&#10;            val foto = auth.currentUser?.photoUrl?.toString() // ou pegue do campo se editável&#10;&#10;            // Converta idade para Timestamp se necessário (aqui mantido como String)&#10;            val usuario = Usuario(&#10;                nomeUsuario = nome,&#10;                emailUsuario = email,&#10;                senhaUsuario = senha,&#10;                idadeUsuario = null, // ajuste se necessário&#10;                enderecoUsuario = endereco,&#10;                fotoUsuario = foto&#10;            )&#10;&#10;            authViewModel.alterar(usuario)&#10;&#10;            // Observa o resultado e mostra Toast&#10;            lifecycleScope.launch {&#10;                authViewModel.authUiState.collectLatest { state -&gt;&#10;                    when (state) {&#10;                        com.example.pathfinder.LoginUiState.SUCCESS -&gt; {&#10;                            Toast.makeText(requireContext(), &quot;Perfil atualizado com sucesso!&quot;, Toast.LENGTH_SHORT).show()&#10;                        }&#10;                        com.example.pathfinder.LoginUiState.ERROR -&gt; {&#10;                            Toast.makeText(requireContext(), &quot;Erro ao atualizar perfil.&quot;, Toast.LENGTH_SHORT).show()&#10;                        }&#10;                        else -&gt; {}&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        view.findViewById&lt;TextView&gt;(R.id.textView2).setOnClickListener {&#10;            // Implementar ação para editar nome de usuário&#10;        }&#10;    }&#10;&#10;    private fun setUserData(view: View) {&#10;        val currentUser = auth.currentUser&#10;        if (currentUser != null) {&#10;            val userId = currentUser.uid&#10;            firestore.collection(&quot;usuarios&quot;).document(userId).get()&#10;                .addOnSuccessListener { document -&gt;&#10;                    if (document != null) {&#10;                        val usuario = document.toObject(Usuario::class.java)&#10;                        if (usuario != null) {&#10;                            view.findViewById&lt;TextView&gt;(R.id.textView2).text = usuario.nomeUsuario&#10;                            view.findViewById&lt;TextView&gt;(R.id.textView3).text = usuario.emailUsuario&#10;                            view.findViewById&lt;TextView&gt;(R.id.senha).text = usuario.senhaUsuario // Ocultar senha&#10;                            view.findViewById&lt;TextView&gt;(R.id.email).text = usuario.emailUsuario&#10;                            view.findViewById&lt;TextView&gt;(R.id.idade).text = formatDate(usuario.idadeUsuario)&#10;                            view.findViewById&lt;TextView&gt;(R.id.nomeUsuario).text = usuario.nomeUsuario&#10;                            view.findViewById&lt;TextView&gt;(R.id.endereco).text = usuario.enderecoUsuario?.toString() ?: &quot;Não informado&quot;&#10;                            val imageView = view.findViewById&lt;ImageView&gt;(R.id.imageView)&#10;                            imageView.setImageResource(R.drawable.ic_profile)&#10;&#10;                            if (!usuario.fotoUsuario.isNullOrEmpty()) {&#10;                                Log.d(&quot;ProfileFragment&quot;, &quot;fotoUsuario: ${usuario.fotoUsuario}&quot;)&#10;                                Glide.with(view.context)&#10;                                    .load(usuario.fotoUsuario)&#10;                                    .error(R.drawable.ic_profile) // Usa a imagem genérica como fallback&#10;                                    .into(imageView)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;                .addOnFailureListener { exception -&gt;&#10;                    Toast.makeText(requireContext(), &quot;Erro ao carregar dados do usuário ${exception.message}&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;        }&#10;    }&#10;&#10;    private fun formatDate(date: Timestamp?): String {&#10;        return if (date != null) {&#10;            val formatter = SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault())&#10;            val dateObj = date.toDate() // Corrigido: converte Timestamp para Date&#10;            formatter.format(dateObj)&#10;        } else {&#10;            &quot;Não informado&quot;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pathfinder/ui/register/RegisterFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pathfinder/ui/register/RegisterFragment.kt" />
              <option name="originalContent" value="package com.example.pathfinder.ui.register&#10;&#10;import androidx.fragment.app.viewModels&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.net.Uri&#10;import android.os.Bundle&#10;import android.util.Log&#10;import androidx.fragment.app.Fragment&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Toast&#10;import androidx.lifecycle.Lifecycle&#10;import androidx.lifecycle.lifecycleScope&#10;import androidx.lifecycle.repeatOnLifecycle&#10;import androidx.navigation.fragment.findNavController&#10;import com.example.pathfinder.LoginUiState&#10;import com.example.pathfinder.R&#10;import com.example.pathfinder.data.AuthViewModel&#10;import com.example.pathfinder.data.models.Usuario&#10;import com.example.pathfinder.databinding.FragmentRegisterBinding&#10;import com.example.pathfinder.util.funcoesUteis&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import com.google.firebase.storage.FirebaseStorage&#10;import kotlinx.coroutines.launch&#10;import java.util.Date&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;import java.util.UUID&#10;&#10;class RegisterFragment : Fragment() {&#10;    private var binding: FragmentRegisterBinding? = null&#10;    private val vm: AuthViewModel by viewModels{ AuthViewModel.Factory }&#10;    private var fotoUri: Uri? = null&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        binding = FragmentRegisterBinding.inflate(inflater, container, false)&#10;        return binding?.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        lifecycleScope.launch {&#10;            //Previne bugs&#10;            viewLifecycleOwner.repeatOnLifecycle(Lifecycle.State.STARTED){&#10;                vm.authUiState.collect { state -&gt;&#10;                    when(state){&#10;                        LoginUiState.LOADING -&gt; {&#10;                            //binding?.progressBar?.visibility = View.VISIBLE&#10;                            Toast.makeText(requireContext(), &quot;Loading...&quot;, Toast.LENGTH_SHORT).show()&#10;                        }&#10;                        LoginUiState.SUCCESS -&gt; {&#10;                            //binding?.progressBar?.visibility = View.GONE&#10;                            Toast.makeText(requireContext(), &quot;Login criado com sucesso&quot;, Toast.LENGTH_SHORT).show()&#10;                            findNavController().navigate(R.id.action_registerFragment_to_loginFragment)&#10;                        }&#10;                        LoginUiState.ERROR -&gt; {&#10;                            //binding?.progressBar?.visibility = View.GONE&#10;                            Toast.makeText(requireContext(), &quot;Erro ao criar login&quot;, Toast.LENGTH_SHORT).show()&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        binding?.btnSelecionarFoto?.setOnClickListener {&#10;            val intent = Intent(Intent.ACTION_PICK)&#10;            intent.type = &quot;image/*&quot;&#10;            startActivityForResult(intent, 101)&#10;        }&#10;&#10;        binding?.btnLogin?.setOnClickListener {&#10;            val name = binding?.etName?.text.toString()&#10;            val email = binding?.etEmail?.text.toString()&#10;            val password = binding?.etPassword?.text.toString()&#10;            val ageInput = binding?.etAge?.text.toString()&#10;            val localFotoUri = fotoUri&#10;&#10;            if (!validarCampos(name, email, password, ageInput)) {&#10;                Toast.makeText(requireContext(), &quot;Preencha todos os campos e selecione uma foto&quot;, Toast.LENGTH_SHORT).show()&#10;                return@setOnClickListener&#10;            }&#10;&#10;            lifecycleScope.launch {&#10;                val age = funcoesUteis.parseDate(ageInput)&#10;                if (age == null) {&#10;                    Toast.makeText(requireContext(), &quot;Formato de data inválido. Use dd/MM/yyyy.&quot;, Toast.LENGTH_SHORT).show()&#10;                    return@launch&#10;                }&#10;&#10;                val downloadUrl = localFotoUri?.let {&#10;                    funcoesUteis.uploadImage(&#10;                        uri = it,&#10;                        storage = FirebaseStorage.getInstance(),&#10;                    )&#10;                } ?: &quot;&quot;&#10;&#10;                // O erro está daqui para cima&#10;&#10;                val usuario = Usuario(&#10;                    nomeUsuario = name,&#10;                    emailUsuario = email,&#10;                    senhaUsuario = password,&#10;                    idadeUsuario = age,&#10;                    fotoUsuario = downloadUrl&#10;                )&#10;&#10;                try {&#10;                    vm.register(usuario)&#10;                } catch (e: Exception) {&#10;                    Toast.makeText(requireContext(), &quot;Erro ao registrar usuário. Tente novamente.&quot;, Toast.LENGTH_SHORT).show()&#10;                    Log.e(&quot;RegisterFragment&quot;, &quot;Erro genérico: ${e.message}&quot;, e)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun validarCampos(name: String, email: String, password: String, ageInput: String): Boolean {&#10;        return name.isNotEmpty() &amp;&amp; email.isNotEmpty() &amp;&amp; password.isNotEmpty() &amp;&amp; ageInput.isNotEmpty()&#10;    }&#10;&#10;    @Deprecated(&quot;Deprecated in Java&quot;)&#10;    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {&#10;        super.onActivityResult(requestCode, resultCode, data)&#10;        if (requestCode == 101 &amp;&amp; resultCode == Activity.RESULT_OK) {&#10;            fotoUri = data?.data&#10;            binding?.ivFotoUsuario?.setImageURI(fotoUri)&#10;        }&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        binding = null&#10;    }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pathfinder.ui.register&#10;&#10;import androidx.fragment.app.viewModels&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.net.Uri&#10;import android.os.Bundle&#10;import android.util.Log&#10;import androidx.fragment.app.Fragment&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Toast&#10;import androidx.lifecycle.Lifecycle&#10;import androidx.lifecycle.lifecycleScope&#10;import androidx.lifecycle.repeatOnLifecycle&#10;import androidx.navigation.fragment.findNavController&#10;import com.example.pathfinder.LoginUiState&#10;import com.example.pathfinder.R&#10;import com.example.pathfinder.data.AuthViewModel&#10;import com.example.pathfinder.data.models.Usuario&#10;import com.example.pathfinder.databinding.FragmentRegisterBinding&#10;import com.example.pathfinder.util.funcoesUteis&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import com.google.firebase.storage.FirebaseStorage&#10;import kotlinx.coroutines.launch&#10;import java.util.Date&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;import java.util.UUID&#10;&#10;class RegisterFragment : Fragment() {&#10;    private var binding: FragmentRegisterBinding? = null&#10;    private val vm: AuthViewModel by viewModels{ AuthViewModel.Factory }&#10;    private var fotoUri: Uri? = null&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        binding = FragmentRegisterBinding.inflate(inflater, container, false)&#10;        return binding?.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        lifecycleScope.launch {&#10;            //Previne bugs&#10;            viewLifecycleOwner.repeatOnLifecycle(Lifecycle.State.STARTED){&#10;                vm.authUiState.collect { state -&gt;&#10;                    when(state){&#10;                        LoginUiState.LOADING -&gt; {&#10;                            //binding?.progressBar?.visibility = View.VISIBLE&#10;                            Toast.makeText(requireContext(), &quot;Loading...&quot;, Toast.LENGTH_SHORT).show()&#10;                        }&#10;                        LoginUiState.SUCCESS -&gt; {&#10;                            //binding?.progressBar?.visibility = View.GONE&#10;                            Toast.makeText(requireContext(), &quot;Login criado com sucesso&quot;, Toast.LENGTH_SHORT).show()&#10;                            findNavController().navigate(R.id.action_registerFragment_to_loginFragment)&#10;                        }&#10;                        LoginUiState.ERROR -&gt; {&#10;                            //binding?.progressBar?.visibility = View.GONE&#10;                            Toast.makeText(requireContext(), &quot;Erro ao criar login&quot;, Toast.LENGTH_SHORT).show()&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        binding?.btnSelecionarFoto?.setOnClickListener {&#10;            val intent = Intent(Intent.ACTION_PICK)&#10;            intent.type = &quot;image/*&quot;&#10;            startActivityForResult(intent, 101)&#10;        }&#10;&#10;        binding?.btnLogin?.setOnClickListener {&#10;            val name = binding?.etName?.text.toString()&#10;            val email = binding?.etEmail?.text.toString()&#10;            val password = binding?.etPassword?.text.toString()&#10;            val ageInput = binding?.etAge?.text.toString()&#10;            val localFotoUri = fotoUri&#10;&#10;            if (!validarCampos(name, email, password, ageInput)) {&#10;                Toast.makeText(requireContext(), &quot;Preencha todos os campos e selecione uma foto&quot;, Toast.LENGTH_SHORT).show()&#10;                return@setOnClickListener&#10;            }&#10;&#10;            lifecycleScope.launch {&#10;                val age = funcoesUteis.parseDate(ageInput)&#10;                if (age == null) {&#10;                    Toast.makeText(requireContext(), &quot;Formato de data inválido. Use dd/MM/yyyy.&quot;, Toast.LENGTH_SHORT).show()&#10;                    return@launch&#10;                }&#10;&#10;                val downloadUrl = localFotoUri?.let {&#10;                    funcoesUteis.uploadImage(&#10;                        uri = it,&#10;                        storage = FirebaseStorage.getInstance(),&#10;                    )&#10;                } ?: &quot;&quot;&#10;&#10;                // O erro está daqui para cima&#10;&#10;                val usuario = Usuario(&#10;                    nomeUsuario = name,&#10;                    emailUsuario = email,&#10;                    senhaUsuario = password,&#10;                    idadeUsuario = age,&#10;                    fotoUsuario = downloadUrl&#10;                )&#10;&#10;                try {&#10;                    vm.register(usuario)&#10;                } catch (e: Exception) {&#10;                    Toast.makeText(requireContext(), &quot;Erro ao registrar usuário. Tente novamente.&quot;, Toast.LENGTH_SHORT).show()&#10;                    Log.e(&quot;RegisterFragment&quot;, &quot;Erro genérico: ${e.message}&quot;, e)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun validarCampos(name: String, email: String, password: String, ageInput: String): Boolean {&#10;        return name.isNotEmpty() &amp;&amp; email.isNotEmpty() &amp;&amp; password.isNotEmpty() &amp;&amp; ageInput.isNotEmpty()&#10;    }&#10;&#10;    @Deprecated(&quot;Deprecated in Java&quot;)&#10;    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {&#10;        super.onActivityResult(requestCode, resultCode, data)&#10;        if (requestCode == 101 &amp;&amp; resultCode == Activity.RESULT_OK) {&#10;            fotoUri = data?.data&#10;            binding?.ivFotoUsuario?.setImageURI(fotoUri)&#10;        }&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        binding = null&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pathfinder/util/funcoesUteis.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pathfinder/util/funcoesUteis.kt" />
              <option name="originalContent" value="package com.example.pathfinder.util&#10;&#10;import android.net.Uri&#10;import android.util.Log&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import com.google.firebase.storage.FirebaseStorage&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.tasks.await&#10;import kotlinx.coroutines.withContext&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;import java.util.UUID&#10;&#10;object funcoesUteis {&#10;    suspend fun uploadImage(&#10;        uri: Uri,&#10;        storage: FirebaseStorage,&#10;    ): String = withContext(Dispatchers.IO) {&#10;        val ref = storage.reference.child(&quot;images/${UUID.randomUUID()}.jpg&quot;)&#10;&#10;        // Espera o upload terminar&#10;        val uploadTask = ref.putFile(uri).await()&#10;&#10;        // Só então acessa o downloadUrl&#10;        val url = ref.downloadUrl.await().toString()&#10;        Log.d(&quot;funcoesUteis&quot;, &quot;Image uploaded to: $url&quot;)&#10;&#10;        return@withContext url&#10;    }&#10;&#10;    fun parseDate(dateStr: String): Timestamp? {&#10;        return try {&#10;            val dateFormat = SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault())&#10;            val parsedDate = dateFormat.parse(dateStr)&#10;            if (parsedDate != null) Timestamp(parsedDate) else null&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.pathfinder.util&#10;&#10;import android.net.Uri&#10;import android.util.Log&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;import com.google.firebase.storage.FirebaseStorage&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.tasks.await&#10;import kotlinx.coroutines.withContext&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;import java.util.UUID&#10;&#10;object funcoesUteis {&#10;    suspend fun uploadImage(&#10;        uri: Uri,&#10;        storage: FirebaseStorage,&#10;    ): String = withContext(Dispatchers.IO) {&#10;        val ref = storage.reference.child(&quot;images/${UUID.randomUUID()}.jpg&quot;)&#10;&#10;        // Espera o upload terminar&#10;        val uploadTask = ref.putFile(uri).await()&#10;&#10;        // Só então acessa o downloadUrl&#10;        val url = ref.downloadUrl.await().toString()&#10;        Log.d(&quot;funcoesUteis&quot;, &quot;Image uploaded to: $url&quot;)&#10;&#10;        return@withContext url&#10;    }&#10;&#10;    fun parseDate(dateStr: String): Timestamp? {&#10;        return try {&#10;            val dateFormat = SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault())&#10;            val parsedDate = dateFormat.parse(dateStr)&#10;            if (parsedDate != null) Timestamp(parsedDate) else null&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>