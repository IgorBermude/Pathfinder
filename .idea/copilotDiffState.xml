<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pathfinder/data/models/Usuario.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pathfinder/data/models/Usuario.kt" />
              <option name="originalContent" value="package com.example.pathfinder.data.models&#10;&#10;import com.google.firebase.Timestamp&#10;&#10;data class Usuario(&#10;    var idUsuario: String? = null,&#10;    var senhaUsuario: String? = null,&#10;    var emailUsuario: String? = null,&#10;    var idadeUsuario: Timestamp? = null, // use Timestamp se estiver usando Firestore&#10;    var nomeUsuario: String? = null,&#10;    var enderecoUsuario: Endereco? = null,&#10;    var localizacaoUsuario: Int? = null,&#10;    var fotoUsuario: String? = null) // URL ou caminho da foto do usuário&#10;&#10;" />
              <option name="updatedContent" value="package com.example.pathfinder.data.models&#10;&#10;import com.google.firebase.Timestamp&#10;&#10;data class Usuario(&#10;    var idUsuario: String? = null,&#10;    var senhaUsuario: String? = null,&#10;    var emailUsuario: String? = null,&#10;    var idadeUsuario: Timestamp? = null, // use Timestamp se estiver usando Firestore&#10;    var nomeUsuario: String? = null,&#10;    var enderecoUsuario: Endereco? = null,&#10;    var localizacaoUsuario: Int? = null,&#10;    var fotoUsuario: String? = null) // URL ou caminho da foto do usuário" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pathfinder/ui/register/RegisterFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pathfinder/ui/register/RegisterFragment.kt" />
              <option name="originalContent" value="package com.example.pathfinder.ui.register&#10;&#10;import androidx.fragment.app.viewModels&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.net.Uri&#10;import android.os.Bundle&#10;import android.util.Log&#10;import androidx.fragment.app.Fragment&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Toast&#10;import androidx.lifecycle.Lifecycle&#10;import androidx.lifecycle.lifecycleScope&#10;import androidx.lifecycle.repeatOnLifecycle&#10;import androidx.navigation.fragment.findNavController&#10;import com.example.pathfinder.LoginUiState&#10;import com.example.pathfinder.R&#10;import com.example.pathfinder.data.AuthViewModel&#10;import com.example.pathfinder.data.models.Usuario&#10;import com.example.pathfinder.databinding.FragmentRegisterBinding&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.storage.FirebaseStorage&#10;import kotlinx.coroutines.launch&#10;import java.util.Date&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;import java.util.UUID&#10;&#10;class RegisterFragment : Fragment() {&#10;    private var binding: FragmentRegisterBinding? = null&#10;    private val vm: AuthViewModel by viewModels{ AuthViewModel.Factory }&#10;    private var fotoUri: Uri? = null&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        binding = FragmentRegisterBinding.inflate(inflater, container, false)&#10;        return binding?.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        lifecycleScope.launch {&#10;            //Previne bugs&#10;            viewLifecycleOwner.repeatOnLifecycle(Lifecycle.State.STARTED){&#10;                vm.authUiState.collect { state -&gt;&#10;                    when(state){&#10;                        LoginUiState.LOADING -&gt; {&#10;                            //binding?.progressBar?.visibility = View.VISIBLE&#10;                            Toast.makeText(requireContext(), &quot;Loading...&quot;, Toast.LENGTH_SHORT).show()&#10;                        }&#10;                        LoginUiState.SUCCESS -&gt; {&#10;                            //binding?.progressBar?.visibility = View.GONE&#10;                            Toast.makeText(requireContext(), &quot;Login criado com sucesso&quot;, Toast.LENGTH_SHORT).show()&#10;                            findNavController().navigate(R.id.action_registerFragment_to_loginFragment)&#10;                        }&#10;                        LoginUiState.ERROR -&gt; {&#10;                            //binding?.progressBar?.visibility = View.GONE&#10;                            Toast.makeText(requireContext(), &quot;Erro ao criar login&quot;, Toast.LENGTH_SHORT).show()&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        binding?.btnSelecionarFoto?.setOnClickListener {&#10;            val intent = Intent(Intent.ACTION_PICK)&#10;            intent.type = &quot;image/*&quot;&#10;            startActivityForResult(intent, 101)&#10;        }&#10;&#10;        binding?.btnLogin?.setOnClickListener {&#10;            val name = binding?.etName?.text.toString()&#10;            val email = binding?.etEmail?.text.toString()&#10;            val password = binding?.etPassword?.text.toString()&#10;            val ageInput = binding?.etAge?.text.toString()&#10;            val localFotoUri = fotoUri // Uri da imagem selecionada do dispositivo&#10;&#10;            if (name.isNotEmpty() &amp;&amp; email.isNotEmpty() &amp;&amp; password.isNotEmpty() &amp;&amp; ageInput.isNotEmpty() &amp;&amp; localFotoUri != null) {&#10;                try {&#10;                    val dateFormat = SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault())&#10;                    val parsedDate = dateFormat.parse(ageInput) ?: throw IllegalArgumentException(&quot;Data inválida&quot;)&#10;                    val age = Timestamp(parsedDate)&#10;&#10;                    //val fotoNome = UUID.randomUUID().toString() + &quot;.jpg&quot;&#10;                    val storageRef = FirebaseStorage.getInstance().reference.child(&quot;$localFotoUri&quot;)&#10;&#10;                    // 1. Upload da imagem&#10;                    storageRef.putFile(localFotoUri)&#10;                        .addOnSuccessListener {&#10;                            // 2. Obtem a URL pública&#10;                            storageRef.downloadUrl.addOnSuccessListener { downloadUrl -&gt;&#10;                                val usuario = Usuario(&#10;                                    nomeUsuario = name,&#10;                                    emailUsuario = email,&#10;                                    senhaUsuario = password,&#10;                                    idadeUsuario = age,&#10;                                    fotoUsuario = downloadUrl.toString()&#10;                                )&#10;                                // 3. Chama a função de registro com a imagem correta&#10;                                lifecycleScope.launch {&#10;                                    vm.register(usuario)&#10;                                }&#10;                            }&#10;                        }&#10;                        .addOnFailureListener {&#10;                            Toast.makeText(requireContext(), &quot;Erro ao fazer upload da foto&quot;, Toast.LENGTH_SHORT).show()&#10;                            Log.e(&quot;RegisterFragment&quot;, &quot;Erro ao fazer upload da foto: ${it.message}&quot;)&#10;                        }&#10;&#10;                } catch (e: Exception) {&#10;                    Toast.makeText(requireContext(), &quot;Formato de data inválido. Use dd/MM/yyyy.&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            } else {&#10;                Toast.makeText(requireContext(), &quot;Preencha todos os campos e selecione uma foto&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;    }&#10;&#10;    @Deprecated(&quot;Deprecated in Java&quot;)&#10;    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {&#10;        super.onActivityResult(requestCode, resultCode, data)&#10;        if (requestCode == 101 &amp;&amp; resultCode == Activity.RESULT_OK) {&#10;            fotoUri = data?.data&#10;            binding?.ivFotoUsuario?.setImageURI(fotoUri)&#10;        }&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        binding = null&#10;    }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pathfinder.ui.register&#10;&#10;import androidx.fragment.app.viewModels&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.net.Uri&#10;import android.os.Bundle&#10;import android.util.Log&#10;import androidx.fragment.app.Fragment&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Toast&#10;import androidx.lifecycle.Lifecycle&#10;import androidx.lifecycle.lifecycleScope&#10;import androidx.lifecycle.repeatOnLifecycle&#10;import androidx.navigation.fragment.findNavController&#10;import com.example.pathfinder.LoginUiState&#10;import com.example.pathfinder.R&#10;import com.example.pathfinder.data.AuthViewModel&#10;import com.example.pathfinder.data.models.Usuario&#10;import com.example.pathfinder.databinding.FragmentRegisterBinding&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.storage.FirebaseStorage&#10;import kotlinx.coroutines.launch&#10;import java.util.Date&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;import java.util.UUID&#10;&#10;class RegisterFragment : Fragment() {&#10;    private var binding: FragmentRegisterBinding? = null&#10;    private val vm: AuthViewModel by viewModels{ AuthViewModel.Factory }&#10;    private var fotoUri: Uri? = null&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        binding = FragmentRegisterBinding.inflate(inflater, container, false)&#10;        return binding?.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        lifecycleScope.launch {&#10;            //Previne bugs&#10;            viewLifecycleOwner.repeatOnLifecycle(Lifecycle.State.STARTED){&#10;                vm.authUiState.collect { state -&gt;&#10;                    when(state){&#10;                        LoginUiState.LOADING -&gt; {&#10;                            //binding?.progressBar?.visibility = View.VISIBLE&#10;                            Toast.makeText(requireContext(), &quot;Loading...&quot;, Toast.LENGTH_SHORT).show()&#10;                        }&#10;                        LoginUiState.SUCCESS -&gt; {&#10;                            //binding?.progressBar?.visibility = View.GONE&#10;                            Toast.makeText(requireContext(), &quot;Login criado com sucesso&quot;, Toast.LENGTH_SHORT).show()&#10;                            findNavController().navigate(R.id.action_registerFragment_to_loginFragment)&#10;                        }&#10;                        LoginUiState.ERROR -&gt; {&#10;                            //binding?.progressBar?.visibility = View.GONE&#10;                            Toast.makeText(requireContext(), &quot;Erro ao criar login&quot;, Toast.LENGTH_SHORT).show()&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        binding?.btnSelecionarFoto?.setOnClickListener {&#10;            val intent = Intent(Intent.ACTION_PICK)&#10;            intent.type = &quot;image/*&quot;&#10;            startActivityForResult(intent, 101)&#10;        }&#10;&#10;        binding?.btnLogin?.setOnClickListener {&#10;            val name = binding?.etName?.text.toString()&#10;            val email = binding?.etEmail?.text.toString()&#10;            val password = binding?.etPassword?.text.toString()&#10;            val ageInput = binding?.etAge?.text.toString()&#10;            val localFotoUri = fotoUri // Uri da imagem selecionada do dispositivo&#10;&#10;            if (name.isNotEmpty() &amp;&amp; email.isNotEmpty() &amp;&amp; password.isNotEmpty() &amp;&amp; ageInput.isNotEmpty() &amp;&amp; localFotoUri != null) {&#10;                try {&#10;                    val dateFormat = SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault())&#10;                    val parsedDate = dateFormat.parse(ageInput) ?: throw IllegalArgumentException(&quot;Data inválida&quot;)&#10;                    val age = Timestamp(parsedDate)&#10;&#10;                    // Gere um nome único para a imagem&#10;                    val fotoNome = UUID.randomUUID().toString() + &quot;.jpg&quot;&#10;                    val storageRef = FirebaseStorage.getInstance().reference.child(&quot;usuarios/$fotoNome&quot;)&#10;&#10;                    // 1. Upload da imagem para o Firebase Storage&#10;                    storageRef.putFile(localFotoUri)&#10;                        .addOnSuccessListener {&#10;                            // 2. Obtem a URL pública da imagem&#10;                            storageRef.downloadUrl.addOnSuccessListener { downloadUrl -&gt;&#10;                                val usuario = Usuario(&#10;                                    nomeUsuario = name,&#10;                                    emailUsuario = email,&#10;                                    senhaUsuario = password,&#10;                                    idadeUsuario = age,&#10;                                    fotoUsuario = downloadUrl.toString() // Salva a URL da imagem&#10;                                )&#10;                                // 3. Chama a função de registro com a imagem correta&#10;                                lifecycleScope.launch {&#10;                                    vm.register(usuario)&#10;                                }&#10;                            }&#10;                        }&#10;                        .addOnFailureListener {&#10;                            Toast.makeText(requireContext(), &quot;Erro ao fazer upload da foto&quot;, Toast.LENGTH_SHORT).show()&#10;                            Log.e(&quot;RegisterFragment&quot;, &quot;Erro ao fazer upload da foto: ${it.message}&quot;)&#10;                        }&#10;&#10;                } catch (e: Exception) {&#10;                    Toast.makeText(requireContext(), &quot;Formato de data inválido. Use dd/MM/yyyy.&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            } else {&#10;                Toast.makeText(requireContext(), &quot;Preencha todos os campos e selecione uma foto&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;    }&#10;&#10;    @Deprecated(&quot;Deprecated in Java&quot;)&#10;    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {&#10;        super.onActivityResult(requestCode, resultCode, data)&#10;        if (requestCode == 101 &amp;&amp; resultCode == Activity.RESULT_OK) {&#10;            fotoUri = data?.data&#10;            binding?.ivFotoUsuario?.setImageURI(fotoUri)&#10;        }&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        binding = null&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>