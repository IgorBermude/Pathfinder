<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/pathfinder/ui/home/HomeFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/pathfinder/ui/home/HomeFragment.kt" />
              <option name="originalContent" value="package com.example.pathfinder.ui.home&#10;&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.util.TypedValue&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.LinearLayout&#10;import android.widget.PopupMenu&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.core.view.updateLayoutParams&#10;import androidx.fragment.app.Fragment&#10;import androidx.fragment.app.commit&#10;import androidx.fragment.app.activityViewModels&#10;import androidx.navigation.fragment.NavHostFragment&#10;import androidx.navigation.fragment.findNavController&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.pathfinder.R&#10;import com.example.pathfinder.data.models.Destino&#10;import com.example.pathfinder.databinding.FragmentHomeBinding&#10;import com.example.pathfinder.ui.MainActivity&#10;import com.example.pathfinder.ui.components.DestinoAdapter&#10;import com.example.pathfinder.ui.components.MapaBottomSheetFragment&#10;import com.example.pathfinder.ui.components.MapaFragment&#10;import com.example.pathfinder.ui.percorrerRota.RouteFragment&#10;import com.example.pathfinder.ui.searchAc.SearchActivity&#10;import com.example.pathfinder.util.NavigationViewUtils&#10;import com.google.android.material.bottomsheet.BottomSheetBehavior&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.mapbox.geojson.Point&#10;import com.mapbox.search.ResponseInfo&#10;import com.mapbox.search.ReverseGeoOptions&#10;import com.mapbox.search.SearchCallback&#10;import com.mapbox.search.result.SearchResult&#10;import com.mapbox.search.ui.view.CommonSearchViewConfiguration&#10;import com.mapbox.search.ui.view.DistanceUnitType&#10;import com.mapbox.search.ui.view.place.SearchPlace&#10;import com.mapbox.search.ui.view.place.SearchPlaceBottomSheetView&#10;import androidx.core.view.isGone&#10;import com.bumptech.glide.Glide&#10;import com.example.pathfinder.data.models.Usuario&#10;import com.example.pathfinder.data.repositories.RotaRepository&#10;import com.example.pathfinder.data.repositories.UsuarioRepository&#10;import com.google.firebase.Timestamp&#10;import com.example.pathfinder.ui.rotas.RotaSharedViewModel&#10;import com.example.pathfinder.util.FirebaseUtil&#10;&#10;&#10;class HomeFragment : Fragment() {&#10;&#10;    companion object {&#10;        private const val REQUEST_CODE_SEARCH = 1001&#10;    }&#10;&#10;    private var _binding: FragmentHomeBinding? = null&#10;    private val binding get() = _binding!!&#10;    private lateinit var targetIcon: ImageView&#10;    private lateinit var searchPlaceView: SearchPlaceBottomSheetView&#10;    private val homeViewModel: HomeViewModel by activityViewModels()&#10;    private val rotaSharedViewModel: RotaSharedViewModel by activityViewModels()&#10;    private lateinit var bottomSheetBehavior: BottomSheetBehavior&lt;LinearLayout&gt;&#10;    private lateinit var destinoAdapter: DestinoAdapter&#10;    private lateinit var txSelecionarDestino: TextView&#10;    private var usuario: Usuario? = null&#10;&#10;    // Variável para armazenar o listener&#10;    private var mapClickListener: ((Point) -&gt; Boolean)? = null&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View {&#10;        _binding = FragmentHomeBinding.inflate(inflater, container, false)&#10;        val root: View = binding.root&#10;&#10;        val usuarioRepository = UsuarioRepository()&#10;&#10;        usuarioRepository.carregarUsuarioLogado()&#10;        usuarioRepository.usuarioLogado.observe(viewLifecycleOwner) { usuario -&gt;&#10;            this.usuario = usuario&#10;            setarImgemUsuario(usuario, root)&#10;        }&#10;&#10;        targetIcon = binding.root.findViewById(R.id.ac_target)&#10;        searchPlaceView = binding.root.findViewById(R.id.search_place_view)&#10;        searchPlaceView.initialize(CommonSearchViewConfiguration(DistanceUnitType.IMPERIAL))&#10;        &#10;        val bottomSheet = binding.root.findViewById&lt;LinearLayout&gt;(R.id.bottom_sheet_destinos)&#10;        val recyclerView = binding.root.findViewById&lt;RecyclerView&gt;(R.id.recycler_destinos)&#10;        bottomSheetBehavior = bottomSheet?.let { BottomSheetBehavior.from(it) }!!&#10;&#10;        // Definindo os três estados: escondido, colapsado (peek), expandido&#10;        val displayMetrics = resources.displayMetrics&#10;        val navViewHeight = dpToPx(56) // Altura padrão do BottomNavigationView&#10;        val peekHeight = navViewHeight + dpToPx(90) // &quot;Pontinha&quot; acima do navView&#10;        val midHeight = (displayMetrics.heightPixels * 0.35).toInt()&#10;        val expandedHeight = (displayMetrics.heightPixels * 0.85).toInt() // Quase tela cheia&#10;&#10;        val uiContainer = binding.root.findViewById&lt;View&gt;(R.id.ui_container)&#10;&#10;        bottomSheetBehavior.peekHeight = peekHeight&#10;        //bottomSheetBehavior.state = BottomSheetBehavior.STATE_HIDDEN&#10;&#10;        txSelecionarDestino = binding.root.findViewById(R.id.tx_selecione_destino)&#10;&#10;        // Callback para mudanças de estado do searchPlaceView&#10;        searchPlaceView.addOnBottomSheetStateChangedListener { state, _ -&gt;&#10;            when (state) {&#10;                SearchPlaceBottomSheetView.OPEN -&gt; {&#10;                    txSelecionarDestino.visibility = View.GONE&#10;                    NavigationViewUtils.esconderBottomNavigationView(requireActivity())&#10;&#10;                }&#10;                SearchPlaceBottomSheetView.HIDDEN -&gt; {&#10;                    val destinos = homeViewModel.obterUltimaRota()?.destinosRota ?: emptyList()&#10;                    if(bottomSheetBehavior.state == BottomSheetBehavior.STATE_HIDDEN &amp;&amp; destinos.isEmpty()) {&#10;                        NavigationViewUtils.mostrarBottomNavigationView(requireActivity())&#10;                    } else{&#10;                        bottomSheetBehavior.state = BottomSheetBehavior.STATE_EXPANDED&#10;                    }&#10;                    val mapaFragment = childFragmentManager.findFragmentById(R.id.map_container) as? MapaFragment&#10;                    mapaFragment?.removeLastMarker()&#10;                }&#10;                else -&gt; {}&#10;            }&#10;        }&#10;&#10;        bottomSheetBehavior.addBottomSheetCallback(object : BottomSheetBehavior.BottomSheetCallback() {&#10;            override fun onStateChanged(bottomSheet: View, newState: Int) {&#10;                val acTarget = requireView().findViewById&lt;View&gt;(R.id.ac_target)&#10;                val btnIniciarRota = requireView().findViewById&lt;View&gt;(R.id.btn_iniciar_rota)&#10;                val btnSalvarRota = requireView().findViewById&lt;View&gt;(R.id.btn_salvar)&#10;                when (newState) {&#10;                    BottomSheetBehavior.STATE_HIDDEN -&gt; {&#10;                        Toast.makeText(requireContext(), &quot;STATE_HIDDEN&quot;, Toast.LENGTH_SHORT).show()&#10;                        NavigationViewUtils.mostrarBottomNavigationView(requireActivity())&#10;                        /*acTarget?.updateLayoutParams&lt;ViewGroup.MarginLayoutParams&gt; {&#10;                            bottomMargin = dpToPx(120)&#10;                        }&#10;                        btnSalvarRota?.updateLayoutParams&lt;ViewGroup.MarginLayoutParams&gt; {&#10;                            bottomMargin = dpToPx(120)&#10;                        }&#10;                        btnIniciarRota?.updateLayoutParams&lt;ViewGroup.MarginLayoutParams&gt; {&#10;                            bottomMargin = dpToPx(119)&#10;                        }*/&#10;                    }&#10;                    BottomSheetBehavior.STATE_COLLAPSED -&gt; {&#10;                        Toast.makeText(requireContext(), &quot;STATE_COLLAPSED&quot;, Toast.LENGTH_SHORT).show()&#10;                        if(uiContainer.isGone){&#10;                            NavigationViewUtils.mostrarBottomNavigationView(requireActivity())&#10;                        }&#10;                        // Estado colapsado: só a &quot;pontinha&quot; acima do navView&#10;                        bottomSheet.requestLayout()&#10;                        acTarget?.updateLayoutParams&lt;ViewGroup.MarginLayoutParams&gt; {&#10;                            bottomMargin = peekHeight + dpToPx(12)&#10;                        }&#10;                        btnSalvarRota?.updateLayoutParams&lt;ViewGroup.MarginLayoutParams&gt; {&#10;                            bottomMargin = peekHeight + dpToPx(12)&#10;                        }&#10;                        btnIniciarRota?.updateLayoutParams&lt;ViewGroup.MarginLayoutParams&gt; {&#10;                            bottomMargin = peekHeight + dpToPx(11)&#10;                        }&#10;                    }&#10;                    BottomSheetBehavior.STATE_EXPANDED -&gt; {&#10;                        Toast.makeText(requireContext(), &quot;STATE_EXPANDED&quot;, Toast.LENGTH_SHORT).show()&#10;                        NavigationViewUtils.esconderBottomNavigationView(requireActivity())&#10;                        //bottomSheet.layoutParams.height = midHeight&#10;                        bottomSheet.requestLayout()&#10;                        acTarget?.updateLayoutParams&lt;ViewGroup.MarginLayoutParams&gt; {&#10;                            bottomMargin = midHeight + dpToPx(16)&#10;                        }&#10;                        btnSalvarRota.updateLayoutParams&lt;ViewGroup.MarginLayoutParams&gt; {&#10;                            bottomMargin = midHeight + dpToPx(16)&#10;                        }&#10;                        btnIniciarRota?.updateLayoutParams&lt;ViewGroup.MarginLayoutParams&gt; {&#10;                            bottomMargin = midHeight + dpToPx(16)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;            override fun onSlide(bottomSheet: View, slideOffset: Float) {}&#10;        })&#10;&#10;        bottomSheetBehavior.addBottomSheetCallback(object : BottomSheetBehavior.BottomSheetCallback() {&#10;            override fun onStateChanged(bottomSheet: View, newState: Int) {&#10;                if (newState == BottomSheetBehavior.STATE_HIDDEN) {&#10;                    // Impede esconder via gesto&#10;                    bottomSheetBehavior.state = BottomSheetBehavior.STATE_COLLAPSED&#10;                }&#10;            }&#10;&#10;            override fun onSlide(bottomSheet: View, slideOffset: Float) {}&#10;        })&#10;&#10;&#10;        // Lixeira do destino adapter&#10;        destinoAdapter = DestinoAdapter(emptyList()) { destino -&gt;&#10;            homeViewModel.removerDestinoDaRota(destino)&#10;            val mapaFragment = childFragmentManager.findFragmentById(R.id.map_container) as? MapaFragment&#10;            val rota = homeViewModel.obterUltimaRota()&#10;            val origem = rota?.origemRota&#10;            val destinos = rota?.destinosRota&#10;&#10;            if (origem != null &amp;&amp; !destinos.isNullOrEmpty()) {&#10;                mapaFragment?.requestRoutes(origem, destinos){}&#10;                mapaFragment?.updateCamera(origem, destino.localDestino)&#10;            } else {&#10;                mapaFragment?.clearRoutes()&#10;            }&#10;        }&#10;        recyclerView?.adapter = destinoAdapter&#10;        recyclerView?.layoutManager = LinearLayoutManager(requireContext())&#10;&#10;        val navHostFragment =&#10;            requireActivity().supportFragmentManager.findFragmentById(R.id.nav_host_fragment_activity_main) as NavHostFragment&#10;        val navController = navHostFragment.navController&#10;&#10;        navController.addOnDestinationChangedListener { _, _, _ -&gt;&#10;            NavigationViewUtils.toggleActionBarForScreen(requireActivity(), true) // para esconder&#10;        }&#10;&#10;        binding.root.findViewById&lt;View&gt;(R.id.btn_iniciar_rota).setOnClickListener{&#10;            esconderComponentes()&#10;            uiContainer.visibility = View.VISIBLE&#10;            childFragmentManager.commit {&#10;                replace(R.id.ui_container, RouteFragment())&#10;            }&#10;            bottomSheetBehavior.state = BottomSheetBehavior.STATE_COLLAPSED&#10;            removerOnMapClickListener()&#10;        }&#10;&#10;        binding.root.findViewById&lt;View&gt;(R.id.search_container).setOnClickListener {&#10;            txSelecionarDestino.visibility = View.GONE&#10;            val intent = Intent(requireContext(), SearchActivity::class.java)&#10;            startActivityForResult(intent, REQUEST_CODE_SEARCH)&#10;            requireActivity().overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out)&#10;        }&#10;&#10;        binding.root.findViewById&lt;View&gt;(R.id.search_text).setOnClickListener {&#10;            txSelecionarDestino.visibility = View.GONE&#10;            val intent = Intent(requireContext(), SearchActivity::class.java)&#10;            startActivityForResult(intent, REQUEST_CODE_SEARCH)&#10;            requireActivity().overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out)&#10;        }&#10;&#10;        binding.actionProfile.setOnClickListener { view -&gt;&#10;            val popupMenu = PopupMenu(requireContext(), view)&#10;            popupMenu.menuInflater.inflate(R.menu.profile_menu, popupMenu.menu)&#10;            popupMenu.setOnMenuItemClickListener { menuItem -&gt;&#10;                when (menuItem.itemId) {&#10;                    R.id.menu_profile -&gt; {&#10;                        findNavController().navigate(R.id.profileFragment)&#10;                        true&#10;                    }&#10;                    R.id.menu_fechar -&gt; {&#10;                        requireActivity().finish()&#10;                        true&#10;                    }&#10;                    R.id.menu_sair -&gt; {&#10;                        FirebaseAuth.getInstance().signOut()&#10;                        val intent = Intent(requireContext(), MainActivity::class.java)&#10;                        intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK&#10;                        startActivity(intent)&#10;                        true&#10;                    }&#10;                    else -&gt; false&#10;                }&#10;            }&#10;            popupMenu.show()&#10;        }&#10;&#10;        // Implementar para mostrar uma mensagem se deseja salvar rota e pedir o nome da rota e apos confirmar, salvar a rota com o rotaRepository&#10;        binding.root.findViewById&lt;View&gt;(R.id.btn_salvar).setOnClickListener {&#10;            NavigationViewUtils.mostrarDialogNomeRota({ nomeRota -&gt;&#10;                val rotaAtual = homeViewModel.obterUltimaRota()&#10;                if (rotaAtual != null) {&#10;                    // Atualiza o nome da rota&#10;                    rotaAtual.nomeRota = nomeRota&#10;                    rotaAtual.dtModificacaoRota = Timestamp.now()&#10;                    rotaAtual.distanciaRota = rotaAtual.destinosRota.sumOf { it.distancia ?: 0.0 }&#10;&#10;                    // Salva a rota no Firestore&#10;                    val rotaRepository = RotaRepository()&#10;                    rotaRepository.salvarRota(rotaAtual, {&#10;                        Toast.makeText(requireContext(), &quot;Rota salva com sucesso&quot;, Toast.LENGTH_SHORT).show()&#10;                    } , { exception-&gt;&#10;                        Toast.makeText(requireContext(), &quot;Erro ao salvar rota: ${exception.message}&quot;, Toast.LENGTH_SHORT).show()&#10;                        Log.e(&quot;HomeFragment&quot;, &quot;Erro ao salvar rota&quot;, exception)&#10;                    })&#10;                    homeViewModel.atualizarUltimaRota(rotaAtual)&#10;&#10;                } else {&#10;                    Toast.makeText(requireContext(), &quot;Nenhuma rota para salvar&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }, requireActivity())&#10;        }&#10;&#10;        binding.root.findViewById&lt;View&gt;(R.id.ac_target).setOnClickListener {&#10;            targetIcon.setImageResource(R.drawable.target_variation)&#10;            targetIcon.setColorFilter(resources.getColor(R.color.blue, null))&#10;&#10;            val mapaFragment = childFragmentManager.findFragmentById(R.id.map_container) as MapaFragment&#10;            mapaFragment.cameraSeguir()&#10;            mapaFragment.setupMapMoveListener(targetIcon)&#10;        }&#10;&#10;        binding.root.findViewById&lt;View&gt;(R.id.map_type_button).setOnClickListener {&#10;            MapaBottomSheetFragment().show(parentFragmentManager, &quot;RotaBottomSheet&quot;)&#10;        }&#10;&#10;        searchPlaceView.addOnCloseClickListener {&#10;            searchPlaceView.hide()&#10;        }&#10;&#10;        searchPlaceView.addOnNavigateClickListener { searchPlace -&gt;&#10;            val destination = Destino(&#10;                nomeDestino = searchPlace.name,&#10;                localDestino = searchPlace.coordinate,&#10;                distancia = searchPlace.distanceMeters&#10;            )&#10;            val mapaFragment = childFragmentManager.findFragmentById(R.id.map_container) as? MapaFragment&#10;&#10;            mapaFragment?.getUserLocation { location -&gt;&#10;                if (location != null) {&#10;                    val origin = Point.fromLngLat(location.longitude, location.latitude)&#10;                    val rotaAtual = homeViewModel.obterUltimaRota()&#10;&#10;                    if (rotaAtual != null) {&#10;                        homeViewModel.adicionarDestinoARotaExistente(destination)&#10;                    } else {&#10;                        homeViewModel.criarNovaRota(origin, destination, searchPlace.name, usuario?.idUsuario, searchPlace.distanceMeters)&#10;                    }&#10;&#10;                    val destinos = homeViewModel.obterUltimaRota()?.destinosRota ?: listOf(destination)&#10;                    mapaFragment.requestRoutes(origin, destinos) {&#10;                        //Toast.makeText(requireContext(), &quot;Rota solicitada: $origin&quot;, Toast.LENGTH_SHORT).show()&#10;                        //searchPlaceView.hide()&#10;                        mapaFragment.removeLastMarker()&#10;                    }&#10;                    mapaFragment.updateCamera(origin, destination.localDestino)&#10;                } else {&#10;                    Toast.makeText(requireContext(), &quot;Localização do usuário não disponível&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;        }&#10;&#10;        searchPlaceView.addOnShareClickListener { searchPlace -&gt;&#10;            //startActivity(createShareIntent(searchPlace))&#10;        }&#10;&#10;        homeViewModel.rotas.observe(viewLifecycleOwner) { rotas -&gt;&#10;            val destinos = rotas.lastOrNull()?.destinosRota ?: emptyList()&#10;            showDestinos(destinos)&#10;        }&#10;&#10;        return root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        // Inicializo o MapaFragment&#10;        childFragmentManager.commit {&#10;            replace(R.id.map_container, MapaFragment().getInstance())&#10;        }&#10;&#10;        // Observa rota selecionada do RotaSharedViewModel&#10;        rotaSharedViewModel.rotaSelecionada.observe(viewLifecycleOwner) { rota -&gt;&#10;            rota?.let {&#10;                homeViewModel.substituirRotaAtual(it)&#10;                val destinos = it.destinosRota.orEmpty()&#10;                showDestinos(destinos)&#10;&#10;                val mapaFragment = childFragmentManager.findFragmentById(R.id.map_container) as? MapaFragment&#10;                if (mapaFragment != null &amp;&amp; destinos.isNotEmpty()) {&#10;                    mapaFragment.getUserLocation { location -&gt;&#10;                        location?.let { loc -&gt;&#10;                            val origin = Point.fromLngLat(loc.longitude, loc.latitude)&#10;                            mapaFragment.requestRoutes(origin, destinos) {}&#10;                            mapaFragment.updateCamera(origin, destinos.map { d -&gt; d.localDestino })&#10;                        } ?: Log.w(&quot;MapaFragment&quot;, &quot;Localização do usuário indisponível&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Aguarde o commit e o carregamento do mapa&#10;        view.post {&#10;            adicionarOnMapClickListenerParaPesquisa()&#10;        }&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;&#10;    private fun onSearchResultSelected(searchResult: SearchResult, responseInfo: ResponseInfo) {&#10;        val searchPlace = SearchPlace.createFromSearchResult(searchResult, responseInfo)&#10;        searchPlaceView.open(searchPlace)&#10;&#10;        bottomSheetBehavior.state = BottomSheetBehavior.STATE_HIDDEN&#10;&#10;        val mapaFragment = childFragmentManager.findFragmentById(R.id.map_container) as? MapaFragment&#10;        val coordinate = searchResult.coordinate&#10;        if (mapaFragment != null &amp;&amp; coordinate != null) {&#10;            mapaFragment.addMarker(coordinate.latitude(), coordinate.longitude())&#10;        }&#10;&#10;        NavigationViewUtils.esconderBottomNavigationView(requireActivity())&#10;    }&#10;&#10;    @Deprecated(&quot;Deprecated in Java&quot;)&#10;    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {&#10;        super.onActivityResult(requestCode, resultCode, data)&#10;        if (requestCode == REQUEST_CODE_SEARCH &amp;&amp; resultCode == Activity.RESULT_OK &amp;&amp; data != null) {&#10;            if (data.getBooleanExtra(&quot;request_pesquisarPorClique&quot;, false)) {&#10;                txSelecionarDestino.visibility = View.VISIBLE&#10;                return&#10;            }&#10;            val searchResult = data.getParcelableExtra&lt;SearchResult&gt;(&quot;search_result&quot;)&#10;            val responseInfo = data.getParcelableExtra&lt;ResponseInfo&gt;(&quot;response_info&quot;)&#10;            if (searchResult != null &amp;&amp; responseInfo != null) {&#10;                onSearchResultSelected(searchResult, responseInfo)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun showDestinos(destinos: List&lt;Destino&gt;) {&#10;        destinoAdapter.update(destinos)&#10;        val bottomSheet = requireView().findViewById&lt;LinearLayout&gt;(R.id.bottom_sheet_destinos)&#10;        val btnSalvarRota = requireView().findViewById&lt;View&gt;(R.id.btn_salvar)&#10;        val btnIniciarRota = requireView().findViewById&lt;View&gt;(R.id.btn_iniciar_rota)&#10;        val txNomeRota = binding.root.findViewById&lt;TextView&gt;(R.id.tx_nome_rota)&#10;        val txQtdDestinos = binding.root.findViewById&lt;TextView&gt;(R.id.tx_qtd_destinos)&#10;        val rotaAtual = homeViewModel.obterUltimaRota()&#10;&#10;        if (destinos.isEmpty()) {&#10;            bottomSheetBehavior.state = BottomSheetBehavior.STATE_HIDDEN&#10;            btnSalvarRota.visibility = View.GONE&#10;            btnIniciarRota.visibility = View.GONE&#10;        } else {&#10;            // Ao mostrar, começa no estado colapsado (meio)&#10;            val displayMetrics = resources.displayMetrics&#10;            val targetHeight = (displayMetrics.heightPixels * 0.35).toInt()&#10;            bottomSheet.layoutParams.height = targetHeight&#10;            bottomSheet.requestLayout()&#10;            bottomSheetBehavior.state = BottomSheetBehavior.STATE_EXPANDED&#10;            btnSalvarRota.visibility = View.VISIBLE&#10;            btnIniciarRota.visibility = View.VISIBLE&#10;            txNomeRota.text = rotaAtual?.nomeRota&#10;            txQtdDestinos.text = rotaAtual?.destinosRota?.size.toString()&#10;        }&#10;    }&#10;&#10;    private fun dpToPx(dp: Int): Int {&#10;        return TypedValue.applyDimension(&#10;            TypedValue.COMPLEX_UNIT_DIP, dp.toFloat(), resources.displayMetrics&#10;        ).toInt()&#10;    }&#10;&#10;    private fun esconderComponentes() {&#10;        val searchBar = requireView().findViewById&lt;View&gt;(R.id.search_bar)&#10;        val actionProfile = requireView().findViewById&lt;View&gt;(R.id.action_profile)&#10;        val btnIniciarRota = requireView().findViewById&lt;View&gt;(R.id.btn_iniciar_rota)&#10;        val acTarget = requireView().findViewById&lt;View&gt;(R.id.ac_target)&#10;        val btnSalvar = requireView().findViewById&lt;View&gt;(R.id.btn_salvar)&#10;&#10;        txSelecionarDestino.visibility = View.GONE&#10;&#10;        // Animação de fade out e esconder&#10;        listOf(searchBar, actionProfile, btnIniciarRota, btnSalvar, acTarget).forEach { view -&gt;&#10;            view?.animate()&#10;                ?.alpha(0f)&#10;                ?.setDuration(300)&#10;                ?.withEndAction { view.visibility = View.GONE }&#10;                ?.start()&#10;        }&#10;    }&#10;&#10;    fun mostrarComponentes() {&#10;        val searchBar = requireView().findViewById&lt;View&gt;(R.id.search_bar)&#10;        val actionProfile = requireView().findViewById&lt;View&gt;(R.id.action_profile)&#10;        val btnIniciarRota = requireView().findViewById&lt;View&gt;(R.id.btn_iniciar_rota)&#10;        val acTarget = requireView().findViewById&lt;View&gt;(R.id.ac_target)&#10;        val btnSalvar = requireView().findViewById&lt;View&gt;(R.id.btn_salvar)&#10;&#10;        val uiContainer = requireView().findViewById&lt;View&gt;(R.id.ui_container)&#10;        uiContainer.visibility = View.GONE&#10;&#10;        listOf(searchBar, actionProfile, btnIniciarRota, acTarget, btnSalvar).forEach { view -&gt;&#10;            view?.visibility = View.VISIBLE&#10;            view?.animate()?.alpha(1f)?.setDuration(300)?.start()&#10;        }&#10;    }&#10;&#10;     fun adicionarOnMapClickListenerParaPesquisa() {&#10;        val mapaFragment = childFragmentManager.findFragmentById(R.id.map_container) as? MapaFragment&#10;        mapClickListener = { point -&gt;&#10;            realizarPesquisaPorPonto(mapaFragment, point)&#10;            true&#10;        }&#10;        mapaFragment?.setOnMapClickListener(mapClickListener!!)&#10;    }&#10;&#10;    private fun removerOnMapClickListener(){&#10;        val mapaFragment = childFragmentManager.findFragmentById(R.id.map_container) as? MapaFragment&#10;        mapClickListener?.let { listener -&gt;&#10;            mapaFragment?.removeOnMapClickListener(listener)&#10;            mapClickListener = null&#10;        }&#10;    }&#10;&#10;    private fun realizarPesquisaPorPonto(mapaFragment: MapaFragment?, point: Point) {&#10;        txSelecionarDestino.visibility = View.GONE&#10;        mapaFragment?.getUserLocation { location -&gt;&#10;            if (location != null) {&#10;                mapaFragment.reverseGeocode(ReverseGeoOptions(point), object : SearchCallback {&#10;                    override fun onResults(results: List&lt;SearchResult&gt;, responseInfo: ResponseInfo) {&#10;                        val searchPlace = SearchPlace.createFromSearchResult(results.first(), responseInfo)&#10;                        searchPlaceView.open(searchPlace)&#10;                        bottomSheetBehavior.state = BottomSheetBehavior.STATE_HIDDEN&#10;                        mapaFragment.addMarker(point.latitude(), point.longitude())&#10;                    }&#10;&#10;                    override fun onError(error: Exception) {&#10;                        Toast.makeText(requireContext(), &quot;Não foi possível conectar aos serviços da Mapbox. Verifique sua conexão.&quot;, Toast.LENGTH_LONG).show()&#10;                    }&#10;                })&#10;            } else {&#10;                Toast.makeText(requireContext(), &quot;Localização do usuário não disponível&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;    }&#10;&#10;    fun getDestinoAdapter(): DestinoAdapter {&#10;        return destinoAdapter&#10;    }&#10;&#10;    //Concertar&#10;    fun setarImgemUsuario(usuario: Usuario?, view: View){&#10;        val actionProfile = requireView().findViewById&lt;ImageView&gt;(R.id.action_profile)&#10;        if (!usuario?.fotoUsuario.isNullOrEmpty()) {&#10;            val bitmap = FirebaseUtil.base64ToBitmap(usuario.fotoUsuario!!)&#10;            if (bitmap != null) {&#10;                Glide.with()&#10;                    .load(bitmap)&#10;                    .circleCrop()&#10;                    .override(512, 512)&#10;                    .into(actionProfile)&#10;            } else {&#10;                actionProfile.setImageResource(R.drawable.ic_profile)&#10;            }&#10;        } else {&#10;            actionProfile.setImageResource(R.drawable.ic_profile)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.pathfinder.ui.home&#10;&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.util.TypedValue&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.LinearLayout&#10;import android.widget.PopupMenu&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.core.view.updateLayoutParams&#10;import androidx.fragment.app.Fragment&#10;import androidx.fragment.app.commit&#10;import androidx.fragment.app.activityViewModels&#10;import androidx.navigation.fragment.NavHostFragment&#10;import androidx.navigation.fragment.findNavController&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.pathfinder.R&#10;import com.example.pathfinder.data.models.Destino&#10;import com.example.pathfinder.databinding.FragmentHomeBinding&#10;import com.example.pathfinder.ui.MainActivity&#10;import com.example.pathfinder.ui.components.DestinoAdapter&#10;import com.example.pathfinder.ui.components.MapaBottomSheetFragment&#10;import com.example.pathfinder.ui.components.MapaFragment&#10;import com.example.pathfinder.ui.percorrerRota.RouteFragment&#10;import com.example.pathfinder.ui.searchAc.SearchActivity&#10;import com.example.pathfinder.util.NavigationViewUtils&#10;import com.google.android.material.bottomsheet.BottomSheetBehavior&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.mapbox.geojson.Point&#10;import com.mapbox.search.ResponseInfo&#10;import com.mapbox.search.ReverseGeoOptions&#10;import com.mapbox.search.SearchCallback&#10;import com.mapbox.search.result.SearchResult&#10;import com.mapbox.search.ui.view.CommonSearchViewConfiguration&#10;import com.mapbox.search.ui.view.DistanceUnitType&#10;import com.mapbox.search.ui.view.place.SearchPlace&#10;import com.mapbox.search.ui.view.place.SearchPlaceBottomSheetView&#10;import androidx.core.view.isGone&#10;import com.bumptech.glide.Glide&#10;import com.example.pathfinder.data.models.Usuario&#10;import com.example.pathfinder.data.repositories.RotaRepository&#10;import com.example.pathfinder.data.repositories.UsuarioRepository&#10;import com.google.firebase.Timestamp&#10;import com.example.pathfinder.ui.rotas.RotaSharedViewModel&#10;import com.example.pathfinder.util.FirebaseUtil&#10;&#10;&#10;class HomeFragment : Fragment() {&#10;&#10;    companion object {&#10;        private const val REQUEST_CODE_SEARCH = 1001&#10;    }&#10;&#10;    private var _binding: FragmentHomeBinding? = null&#10;    private val binding get() = _binding!!&#10;    private lateinit var targetIcon: ImageView&#10;    private lateinit var searchPlaceView: SearchPlaceBottomSheetView&#10;    private val homeViewModel: HomeViewModel by activityViewModels()&#10;    private val rotaSharedViewModel: RotaSharedViewModel by activityViewModels()&#10;    private lateinit var bottomSheetBehavior: BottomSheetBehavior&lt;LinearLayout&gt;&#10;    private lateinit var destinoAdapter: DestinoAdapter&#10;    private lateinit var txSelecionarDestino: TextView&#10;    private var usuario: Usuario? = null&#10;&#10;    // Variável para armazenar o listener&#10;    private var mapClickListener: ((Point) -&gt; Boolean)? = null&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View {&#10;        _binding = FragmentHomeBinding.inflate(inflater, container, false)&#10;        val root: View = binding.root&#10;&#10;        val usuarioRepository = UsuarioRepository()&#10;&#10;        usuarioRepository.carregarUsuarioLogado()&#10;        usuarioRepository.usuarioLogado.observe(viewLifecycleOwner) { usuario -&gt;&#10;            this.usuario = usuario&#10;            setarImgemUsuario(usuario, root)&#10;        }&#10;&#10;        targetIcon = binding.root.findViewById(R.id.ac_target)&#10;        searchPlaceView = binding.root.findViewById(R.id.search_place_view)&#10;        searchPlaceView.initialize(CommonSearchViewConfiguration(DistanceUnitType.IMPERIAL))&#10;        &#10;        val bottomSheet = binding.root.findViewById&lt;LinearLayout&gt;(R.id.bottom_sheet_destinos)&#10;        val recyclerView = binding.root.findViewById&lt;RecyclerView&gt;(R.id.recycler_destinos)&#10;        bottomSheetBehavior = bottomSheet?.let { BottomSheetBehavior.from(it) }!!&#10;&#10;        // Definindo os três estados: escondido, colapsado (peek), expandido&#10;        val displayMetrics = resources.displayMetrics&#10;        val navViewHeight = dpToPx(56) // Altura padrão do BottomNavigationView&#10;        val peekHeight = navViewHeight + dpToPx(90) // &quot;Pontinha&quot; acima do navView&#10;        val midHeight = (displayMetrics.heightPixels * 0.35).toInt()&#10;        val expandedHeight = (displayMetrics.heightPixels * 0.85).toInt() // Quase tela cheia&#10;&#10;        val uiContainer = binding.root.findViewById&lt;View&gt;(R.id.ui_container)&#10;&#10;        bottomSheetBehavior.peekHeight = peekHeight&#10;        //bottomSheetBehavior.state = BottomSheetBehavior.STATE_HIDDEN&#10;&#10;        txSelecionarDestino = binding.root.findViewById(R.id.tx_selecione_destino)&#10;&#10;        // Callback para mudanças de estado do searchPlaceView&#10;        searchPlaceView.addOnBottomSheetStateChangedListener { state, _ -&gt;&#10;            when (state) {&#10;                SearchPlaceBottomSheetView.OPEN -&gt; {&#10;                    txSelecionarDestino.visibility = View.GONE&#10;                    NavigationViewUtils.esconderBottomNavigationView(requireActivity())&#10;&#10;                }&#10;                SearchPlaceBottomSheetView.HIDDEN -&gt; {&#10;                    val destinos = homeViewModel.obterUltimaRota()?.destinosRota ?: emptyList()&#10;                    if(bottomSheetBehavior.state == BottomSheetBehavior.STATE_HIDDEN &amp;&amp; destinos.isEmpty()) {&#10;                        NavigationViewUtils.mostrarBottomNavigationView(requireActivity())&#10;                    } else{&#10;                        bottomSheetBehavior.state = BottomSheetBehavior.STATE_EXPANDED&#10;                    }&#10;                    val mapaFragment = childFragmentManager.findFragmentById(R.id.map_container) as? MapaFragment&#10;                    mapaFragment?.removeLastMarker()&#10;                }&#10;                else -&gt; {}&#10;            }&#10;        }&#10;&#10;        bottomSheetBehavior.addBottomSheetCallback(object : BottomSheetBehavior.BottomSheetCallback() {&#10;            override fun onStateChanged(bottomSheet: View, newState: Int) {&#10;                val acTarget = requireView().findViewById&lt;View&gt;(R.id.ac_target)&#10;                val btnIniciarRota = requireView().findViewById&lt;View&gt;(R.id.btn_iniciar_rota)&#10;                val btnSalvarRota = requireView().findViewById&lt;View&gt;(R.id.btn_salvar)&#10;                when (newState) {&#10;                    BottomSheetBehavior.STATE_HIDDEN -&gt; {&#10;                        Toast.makeText(requireContext(), &quot;STATE_HIDDEN&quot;, Toast.LENGTH_SHORT).show()&#10;                        NavigationViewUtils.mostrarBottomNavigationView(requireActivity())&#10;                        /*acTarget?.updateLayoutParams&lt;ViewGroup.MarginLayoutParams&gt; {&#10;                            bottomMargin = dpToPx(120)&#10;                        }&#10;                        btnSalvarRota?.updateLayoutParams&lt;ViewGroup.MarginLayoutParams&gt; {&#10;                            bottomMargin = dpToPx(120)&#10;                        }&#10;                        btnIniciarRota?.updateLayoutParams&lt;ViewGroup.MarginLayoutParams&gt; {&#10;                            bottomMargin = dpToPx(119)&#10;                        }*/&#10;                    }&#10;                    BottomSheetBehavior.STATE_COLLAPSED -&gt; {&#10;                        Toast.makeText(requireContext(), &quot;STATE_COLLAPSED&quot;, Toast.LENGTH_SHORT).show()&#10;                        if(uiContainer.isGone){&#10;                            NavigationViewUtils.mostrarBottomNavigationView(requireActivity())&#10;                        }&#10;                        // Estado colapsado: só a &quot;pontinha&quot; acima do navView&#10;                        bottomSheet.requestLayout()&#10;                        acTarget?.updateLayoutParams&lt;ViewGroup.MarginLayoutParams&gt; {&#10;                            bottomMargin = peekHeight + dpToPx(12)&#10;                        }&#10;                        btnSalvarRota?.updateLayoutParams&lt;ViewGroup.MarginLayoutParams&gt; {&#10;                            bottomMargin = peekHeight + dpToPx(12)&#10;                        }&#10;                        btnIniciarRota?.updateLayoutParams&lt;ViewGroup.MarginLayoutParams&gt; {&#10;                            bottomMargin = peekHeight + dpToPx(11)&#10;                        }&#10;                    }&#10;                    BottomSheetBehavior.STATE_EXPANDED -&gt; {&#10;                        Toast.makeText(requireContext(), &quot;STATE_EXPANDED&quot;, Toast.LENGTH_SHORT).show()&#10;                        NavigationViewUtils.esconderBottomNavigationView(requireActivity())&#10;                        //bottomSheet.layoutParams.height = midHeight&#10;                        bottomSheet.requestLayout()&#10;                        acTarget?.updateLayoutParams&lt;ViewGroup.MarginLayoutParams&gt; {&#10;                            bottomMargin = midHeight + dpToPx(16)&#10;                        }&#10;                        btnSalvarRota.updateLayoutParams&lt;ViewGroup.MarginLayoutParams&gt; {&#10;                            bottomMargin = midHeight + dpToPx(16)&#10;                        }&#10;                        btnIniciarRota?.updateLayoutParams&lt;ViewGroup.MarginLayoutParams&gt; {&#10;                            bottomMargin = midHeight + dpToPx(16)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;            override fun onSlide(bottomSheet: View, slideOffset: Float) {}&#10;        })&#10;&#10;        bottomSheetBehavior.addBottomSheetCallback(object : BottomSheetBehavior.BottomSheetCallback() {&#10;            override fun onStateChanged(bottomSheet: View, newState: Int) {&#10;                if (newState == BottomSheetBehavior.STATE_HIDDEN) {&#10;                    // Impede esconder via gesto&#10;                    bottomSheetBehavior.state = BottomSheetBehavior.STATE_COLLAPSED&#10;                }&#10;            }&#10;&#10;            override fun onSlide(bottomSheet: View, slideOffset: Float) {}&#10;        })&#10;&#10;&#10;        // Lixeira do destino adapter&#10;        destinoAdapter = DestinoAdapter(emptyList()) { destino -&gt;&#10;            homeViewModel.removerDestinoDaRota(destino)&#10;            val mapaFragment = childFragmentManager.findFragmentById(R.id.map_container) as? MapaFragment&#10;            val rota = homeViewModel.obterUltimaRota()&#10;            val origem = rota?.origemRota&#10;            val destinos = rota?.destinosRota&#10;&#10;            if (origem != null &amp;&amp; !destinos.isNullOrEmpty()) {&#10;                mapaFragment?.requestRoutes(origem, destinos){}&#10;                mapaFragment?.updateCamera(origem, destino.localDestino)&#10;            } else {&#10;                mapaFragment?.clearRoutes()&#10;            }&#10;        }&#10;        recyclerView?.adapter = destinoAdapter&#10;        recyclerView?.layoutManager = LinearLayoutManager(requireContext())&#10;&#10;        val navHostFragment =&#10;            requireActivity().supportFragmentManager.findFragmentById(R.id.nav_host_fragment_activity_main) as NavHostFragment&#10;        val navController = navHostFragment.navController&#10;&#10;        navController.addOnDestinationChangedListener { _, _, _ -&gt;&#10;            NavigationViewUtils.toggleActionBarForScreen(requireActivity(), true) // para esconder&#10;        }&#10;&#10;        binding.root.findViewById&lt;View&gt;(R.id.btn_iniciar_rota).setOnClickListener{&#10;            esconderComponentes()&#10;            uiContainer.visibility = View.VISIBLE&#10;            childFragmentManager.commit {&#10;                replace(R.id.ui_container, RouteFragment())&#10;            }&#10;            bottomSheetBehavior.state = BottomSheetBehavior.STATE_COLLAPSED&#10;            removerOnMapClickListener()&#10;        }&#10;&#10;        binding.root.findViewById&lt;View&gt;(R.id.search_container).setOnClickListener {&#10;            txSelecionarDestino.visibility = View.GONE&#10;            val intent = Intent(requireContext(), SearchActivity::class.java)&#10;            startActivityForResult(intent, REQUEST_CODE_SEARCH)&#10;            requireActivity().overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out)&#10;        }&#10;&#10;        binding.root.findViewById&lt;View&gt;(R.id.search_text).setOnClickListener {&#10;            txSelecionarDestino.visibility = View.GONE&#10;            val intent = Intent(requireContext(), SearchActivity::class.java)&#10;            startActivityForResult(intent, REQUEST_CODE_SEARCH)&#10;            requireActivity().overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out)&#10;        }&#10;&#10;        binding.actionProfile.setOnClickListener { view -&gt;&#10;            val popupMenu = PopupMenu(requireContext(), view)&#10;            popupMenu.menuInflater.inflate(R.menu.profile_menu, popupMenu.menu)&#10;            popupMenu.setOnMenuItemClickListener { menuItem -&gt;&#10;                when (menuItem.itemId) {&#10;                    R.id.menu_profile -&gt; {&#10;                        findNavController().navigate(R.id.profileFragment)&#10;                        true&#10;                    }&#10;                    R.id.menu_fechar -&gt; {&#10;                        requireActivity().finish()&#10;                        true&#10;                    }&#10;                    R.id.menu_sair -&gt; {&#10;                        FirebaseAuth.getInstance().signOut()&#10;                        val intent = Intent(requireContext(), MainActivity::class.java)&#10;                        intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK&#10;                        startActivity(intent)&#10;                        true&#10;                    }&#10;                    else -&gt; false&#10;                }&#10;            }&#10;            popupMenu.show()&#10;        }&#10;&#10;        // Implementar para mostrar uma mensagem se deseja salvar rota e pedir o nome da rota e apos confirmar, salvar a rota com o rotaRepository&#10;        binding.root.findViewById&lt;View&gt;(R.id.btn_salvar).setOnClickListener {&#10;            NavigationViewUtils.mostrarDialogNomeRota({ nomeRota -&gt;&#10;                val rotaAtual = homeViewModel.obterUltimaRota()&#10;                if (rotaAtual != null) {&#10;                    // Atualiza o nome da rota&#10;                    rotaAtual.nomeRota = nomeRota&#10;                    rotaAtual.dtModificacaoRota = Timestamp.now()&#10;                    rotaAtual.distanciaRota = rotaAtual.destinosRota.sumOf { it.distancia ?: 0.0 }&#10;&#10;                    // Salva a rota no Firestore&#10;                    val rotaRepository = RotaRepository()&#10;                    rotaRepository.salvarRota(rotaAtual, {&#10;                        Toast.makeText(requireContext(), &quot;Rota salva com sucesso&quot;, Toast.LENGTH_SHORT).show()&#10;                    } , { exception-&gt;&#10;                        Toast.makeText(requireContext(), &quot;Erro ao salvar rota: ${exception.message}&quot;, Toast.LENGTH_SHORT).show()&#10;                        Log.e(&quot;HomeFragment&quot;, &quot;Erro ao salvar rota&quot;, exception)&#10;                    })&#10;                    homeViewModel.atualizarUltimaRota(rotaAtual)&#10;&#10;                } else {&#10;                    Toast.makeText(requireContext(), &quot;Nenhuma rota para salvar&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }, requireActivity())&#10;        }&#10;&#10;        binding.root.findViewById&lt;View&gt;(R.id.ac_target).setOnClickListener {&#10;            targetIcon.setImageResource(R.drawable.target_variation)&#10;            targetIcon.setColorFilter(resources.getColor(R.color.blue, null))&#10;&#10;            val mapaFragment = childFragmentManager.findFragmentById(R.id.map_container) as MapaFragment&#10;            mapaFragment.cameraSeguir()&#10;            mapaFragment.setupMapMoveListener(targetIcon)&#10;        }&#10;&#10;        binding.root.findViewById&lt;View&gt;(R.id.map_type_button).setOnClickListener {&#10;            MapaBottomSheetFragment().show(parentFragmentManager, &quot;RotaBottomSheet&quot;)&#10;        }&#10;&#10;        searchPlaceView.addOnCloseClickListener {&#10;            searchPlaceView.hide()&#10;        }&#10;&#10;        searchPlaceView.addOnNavigateClickListener { searchPlace -&gt;&#10;            val destination = Destino(&#10;                nomeDestino = searchPlace.name,&#10;                localDestino = searchPlace.coordinate,&#10;                distancia = searchPlace.distanceMeters&#10;            )&#10;            val mapaFragment = childFragmentManager.findFragmentById(R.id.map_container) as? MapaFragment&#10;&#10;            mapaFragment?.getUserLocation { location -&gt;&#10;                if (location != null) {&#10;                    val origin = Point.fromLngLat(location.longitude, location.latitude)&#10;                    val rotaAtual = homeViewModel.obterUltimaRota()&#10;&#10;                    if (rotaAtual != null) {&#10;                        homeViewModel.adicionarDestinoARotaExistente(destination)&#10;                    } else {&#10;                        homeViewModel.criarNovaRota(origin, destination, searchPlace.name, usuario?.idUsuario, searchPlace.distanceMeters)&#10;                    }&#10;&#10;                    val destinos = homeViewModel.obterUltimaRota()?.destinosRota ?: listOf(destination)&#10;                    mapaFragment.requestRoutes(origin, destinos) {&#10;                        //Toast.makeText(requireContext(), &quot;Rota solicitada: $origin&quot;, Toast.LENGTH_SHORT).show()&#10;                        //searchPlaceView.hide()&#10;                        mapaFragment.removeLastMarker()&#10;                    }&#10;                    mapaFragment.updateCamera(origin, destination.localDestino)&#10;                } else {&#10;                    Toast.makeText(requireContext(), &quot;Localização do usuário não disponível&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;        }&#10;&#10;        searchPlaceView.addOnShareClickListener { searchPlace -&gt;&#10;            //startActivity(createShareIntent(searchPlace))&#10;        }&#10;&#10;        homeViewModel.rotas.observe(viewLifecycleOwner) { rotas -&gt;&#10;            val destinos = rotas.lastOrNull()?.destinosRota ?: emptyList()&#10;            showDestinos(destinos)&#10;        }&#10;&#10;        return root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        // Inicializo o MapaFragment&#10;        childFragmentManager.commit {&#10;            replace(R.id.map_container, MapaFragment().getInstance())&#10;        }&#10;&#10;        // Observa rota selecionada do RotaSharedViewModel&#10;        rotaSharedViewModel.rotaSelecionada.observe(viewLifecycleOwner) { rota -&gt;&#10;            rota?.let {&#10;                homeViewModel.substituirRotaAtual(it)&#10;                val destinos = it.destinosRota.orEmpty()&#10;                showDestinos(destinos)&#10;&#10;                val mapaFragment = childFragmentManager.findFragmentById(R.id.map_container) as? MapaFragment&#10;                if (mapaFragment != null &amp;&amp; destinos.isNotEmpty()) {&#10;                    mapaFragment.getUserLocation { location -&gt;&#10;                        location?.let { loc -&gt;&#10;                            val origin = Point.fromLngLat(loc.longitude, loc.latitude)&#10;                            mapaFragment.requestRoutes(origin, destinos) {}&#10;                            mapaFragment.updateCamera(origin, destinos.map { d -&gt; d.localDestino })&#10;                        } ?: Log.w(&quot;MapaFragment&quot;, &quot;Localização do usuário indisponível&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Aguarde o commit e o carregamento do mapa&#10;        view.post {&#10;            adicionarOnMapClickListenerParaPesquisa()&#10;        }&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;&#10;    private fun onSearchResultSelected(searchResult: SearchResult, responseInfo: ResponseInfo) {&#10;        val searchPlace = SearchPlace.createFromSearchResult(searchResult, responseInfo)&#10;        searchPlaceView.open(searchPlace)&#10;&#10;        bottomSheetBehavior.state = BottomSheetBehavior.STATE_HIDDEN&#10;&#10;        val mapaFragment = childFragmentManager.findFragmentById(R.id.map_container) as? MapaFragment&#10;        val coordinate = searchResult.coordinate&#10;        if (mapaFragment != null &amp;&amp; coordinate != null) {&#10;            mapaFragment.addMarker(coordinate.latitude(), coordinate.longitude())&#10;        }&#10;&#10;        NavigationViewUtils.esconderBottomNavigationView(requireActivity())&#10;    }&#10;&#10;    @Deprecated(&quot;Deprecated in Java&quot;)&#10;    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {&#10;        super.onActivityResult(requestCode, resultCode, data)&#10;        if (requestCode == REQUEST_CODE_SEARCH &amp;&amp; resultCode == Activity.RESULT_OK &amp;&amp; data != null) {&#10;            if (data.getBooleanExtra(&quot;request_pesquisarPorClique&quot;, false)) {&#10;                txSelecionarDestino.visibility = View.VISIBLE&#10;                return&#10;            }&#10;            val searchResult = data.getParcelableExtra&lt;SearchResult&gt;(&quot;search_result&quot;)&#10;            val responseInfo = data.getParcelableExtra&lt;ResponseInfo&gt;(&quot;response_info&quot;)&#10;            if (searchResult != null &amp;&amp; responseInfo != null) {&#10;                onSearchResultSelected(searchResult, responseInfo)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun showDestinos(destinos: List&lt;Destino&gt;) {&#10;        destinoAdapter.update(destinos)&#10;        val bottomSheet = requireView().findViewById&lt;LinearLayout&gt;(R.id.bottom_sheet_destinos)&#10;        val btnSalvarRota = requireView().findViewById&lt;View&gt;(R.id.btn_salvar)&#10;        val btnIniciarRota = requireView().findViewById&lt;View&gt;(R.id.btn_iniciar_rota)&#10;        val txNomeRota = binding.root.findViewById&lt;TextView&gt;(R.id.tx_nome_rota)&#10;        val txQtdDestinos = binding.root.findViewById&lt;TextView&gt;(R.id.tx_qtd_destinos)&#10;        val rotaAtual = homeViewModel.obterUltimaRota()&#10;&#10;        if (destinos.isEmpty()) {&#10;            bottomSheetBehavior.state = BottomSheetBehavior.STATE_HIDDEN&#10;            btnSalvarRota.visibility = View.GONE&#10;            btnIniciarRota.visibility = View.GONE&#10;        } else {&#10;            // Ao mostrar, começa no estado colapsado (meio)&#10;            val displayMetrics = resources.displayMetrics&#10;            val targetHeight = (displayMetrics.heightPixels * 0.35).toInt()&#10;            bottomSheet.layoutParams.height = targetHeight&#10;            bottomSheet.requestLayout()&#10;            bottomSheetBehavior.state = BottomSheetBehavior.STATE_EXPANDED&#10;            btnSalvarRota.visibility = View.VISIBLE&#10;            btnIniciarRota.visibility = View.VISIBLE&#10;            txNomeRota.text = rotaAtual?.nomeRota&#10;            txQtdDestinos.text = rotaAtual?.destinosRota?.size.toString()&#10;        }&#10;    }&#10;&#10;    private fun dpToPx(dp: Int): Int {&#10;        return TypedValue.applyDimension(&#10;            TypedValue.COMPLEX_UNIT_DIP, dp.toFloat(), resources.displayMetrics&#10;        ).toInt()&#10;    }&#10;&#10;    private fun esconderComponentes() {&#10;        val searchBar = requireView().findViewById&lt;View&gt;(R.id.search_bar)&#10;        val actionProfile = requireView().findViewById&lt;View&gt;(R.id.action_profile)&#10;        val btnIniciarRota = requireView().findViewById&lt;View&gt;(R.id.btn_iniciar_rota)&#10;        val acTarget = requireView().findViewById&lt;View&gt;(R.id.ac_target)&#10;        val btnSalvar = requireView().findViewById&lt;View&gt;(R.id.btn_salvar)&#10;&#10;        txSelecionarDestino.visibility = View.GONE&#10;&#10;        // Animação de fade out e esconder&#10;        listOf(searchBar, actionProfile, btnIniciarRota, btnSalvar, acTarget).forEach { view -&gt;&#10;            view?.animate()&#10;                ?.alpha(0f)&#10;                ?.setDuration(300)&#10;                ?.withEndAction { view.visibility = View.GONE }&#10;                ?.start()&#10;        }&#10;    }&#10;&#10;    fun mostrarComponentes() {&#10;        val searchBar = requireView().findViewById&lt;View&gt;(R.id.search_bar)&#10;        val actionProfile = requireView().findViewById&lt;View&gt;(R.id.action_profile)&#10;        val btnIniciarRota = requireView().findViewById&lt;View&gt;(R.id.btn_iniciar_rota)&#10;        val acTarget = requireView().findViewById&lt;View&gt;(R.id.ac_target)&#10;        val btnSalvar = requireView().findViewById&lt;View&gt;(R.id.btn_salvar)&#10;&#10;        val uiContainer = requireView().findViewById&lt;View&gt;(R.id.ui_container)&#10;        uiContainer.visibility = View.GONE&#10;&#10;        listOf(searchBar, actionProfile, btnIniciarRota, acTarget, btnSalvar).forEach { view -&gt;&#10;            view?.visibility = View.VISIBLE&#10;            view?.animate()?.alpha(1f)?.setDuration(300)?.start()&#10;        }&#10;    }&#10;&#10;     fun adicionarOnMapClickListenerParaPesquisa() {&#10;        val mapaFragment = childFragmentManager.findFragmentById(R.id.map_container) as? MapaFragment&#10;        mapClickListener = { point -&gt;&#10;            realizarPesquisaPorPonto(mapaFragment, point)&#10;            true&#10;        }&#10;        mapaFragment?.setOnMapClickListener(mapClickListener!!)&#10;    }&#10;&#10;    private fun removerOnMapClickListener(){&#10;        val mapaFragment = childFragmentManager.findFragmentById(R.id.map_container) as? MapaFragment&#10;        mapClickListener?.let { listener -&gt;&#10;            mapaFragment?.removeOnMapClickListener(listener)&#10;            mapClickListener = null&#10;        }&#10;    }&#10;&#10;    private fun realizarPesquisaPorPonto(mapaFragment: MapaFragment?, point: Point) {&#10;        txSelecionarDestino.visibility = View.GONE&#10;        mapaFragment?.getUserLocation { location -&gt;&#10;            if (location != null) {&#10;                mapaFragment.reverseGeocode(ReverseGeoOptions(point), object : SearchCallback {&#10;                    override fun onResults(results: List&lt;SearchResult&gt;, responseInfo: ResponseInfo) {&#10;                        val searchPlace = SearchPlace.createFromSearchResult(results.first(), responseInfo)&#10;                        searchPlaceView.open(searchPlace)&#10;                        bottomSheetBehavior.state = BottomSheetBehavior.STATE_HIDDEN&#10;                        mapaFragment.addMarker(point.latitude(), point.longitude())&#10;                    }&#10;&#10;                    override fun onError(error: Exception) {&#10;                        Toast.makeText(requireContext(), &quot;Não foi possível conectar aos serviços da Mapbox. Verifique sua conexão.&quot;, Toast.LENGTH_LONG).show()&#10;                    }&#10;                })&#10;            } else {&#10;                Toast.makeText(requireContext(), &quot;Localização do usuário não disponível&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;    }&#10;&#10;    fun getDestinoAdapter(): DestinoAdapter {&#10;        return destinoAdapter&#10;    }&#10;&#10;    //Concertar&#10;    fun setarImgemUsuario(usuario: Usuario?, view: View){&#10;        val actionProfile = view.findViewById&lt;ImageView&gt;(R.id.action_profile)&#10;        if (!usuario?.fotoUsuario.isNullOrEmpty()) {&#10;            val bitmap = FirebaseUtil.base64ToBitmap(usuario.fotoUsuario!!)&#10;            if (bitmap != null) {&#10;                Glide.with(requireContext())&#10;                    .load(bitmap)&#10;                    .circleCrop()&#10;                    .override(512, 512)&#10;                    .into(actionProfile)&#10;            } else {&#10;                actionProfile.setImageResource(R.drawable.ic_profile)&#10;            }&#10;        } else {&#10;            actionProfile.setImageResource(R.drawable.ic_profile)&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>